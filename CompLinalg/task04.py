# Задача 4
#
# Реализуйте нахождение QR-разложения при помощи вращений Гивенса за O(n^3).
#
# Input: A \in M_n(\R).
# Output: Q и R такие, что A = QR, где Q - ортогональная, а R - верхнетреугольная.

import numpy as np

# Домножение матрицы A на матрицу вращения Гивенса
def givensRotation(A, i, j, c, s):
    u = c * A[i, ...] + s * A[j, ...]
    v = -s * A[i, ...] + c * A[j, ...]
    A[i, ...] = u
    A[j, ...] = v
    return None

# QR-разложение с помощью матриц Гивенса
def qrDecomposition(M):
    n = M.shape[0]
    A = np.copy(M)
    Q = np.eye(n)
    for i in range(n):
        for j in range(i + 1, n):
            s = A[j, i] / ((A[i, i] ** 2 + A[j, i] ** 2) ** 0.5)
            c = A[i, i] / ((A[i, i] ** 2 + A[j, i] ** 2) ** 0.5)
            givensRotation(Q, i, j, c, s)
            givensRotation(A, i, j, c, s)
    return Q.T, A

# ========== Пример работы: ==========
#
#
# A = np.array([[1,2,4],
#               [3,3,2],
#               [4,1,3]],
#             dtype=float)
#
# Q, R = qrDecomposition(A)
#
# print(Q)
#
# > [[ 0.19611614  0.61547108 -0.76337004]
#    [ 0.58834841  0.54893366  0.59373225]
#    [ 0.78446454 -0.56556802 -0.25445668]]
#
# print(R)
#
# > [[ 5.09901951e+00  2.94174203e+00  4.31455497e+00]
#    [-0.00000000e+00  2.31217513e+00  1.86304759e+00]
#    [ 0.00000000e+00  1.11022302e-16 -2.62938568e+00]]